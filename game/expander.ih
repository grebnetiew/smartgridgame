// We now setup the IO expander
// This means we have to set the pins to their respective functions
// These are defined here

// The layout is as follows (digital io):
//  0- 7 PORTB of U2
//  8-15 PORTA of U2
// 16-23 PORTB of U4
// 24-27 PORTA of U4 (only connectors 4-7, the others select analogread addr)
// The analog pins are input only, 16 times. These will be buttons. 

#include <stdint.h>

class IOExpander {
    uint8_t states[4];

public:
    IOExpander();
    void set(size_t pin, bool state);
    void update();
    void post();
    uint8_t analogRead(size_t pin);
private:
    void analogSelect(size_t pin);
};

void IOExpander::set(size_t pin, bool newState) {
    if (pin < 8) {
        states[0] = newState ? states[0] | (1u << pin) : states[0] & ~(1u << pin);
    } else if (pin < 16)) {
        pin -= 8;
        states[1] = newState ? states[1] | (1u << pin) : states[1] & ~(1u << pin);
    } else if (pin < 24) {
        pin -= 16;
        states[2] = newState ? states[2] | (1u << pin) : states[2] & ~(1u << pin);
    } else {
        pin -= 20; // Only write the high ports of this register, the rest is analog
        states[3] = newState ? states[3] | (1u << pin) : states[3] & ~(1u << pin);
    }
}

void IOExpander::update() {
    Wire.beginTransmission(0x20);   // Select U2
    Wire.write(0x13);           // Select PORTB
    Wire.write(states[0]);      // Write states
    Wire.endTransmission();

    Wire.beginTransmission(0x20);   // Select U2
    Wire.write(0x12);           // Select PORTA
    Wire.write(states[1]);      // Write states
    Wire.endTransmission();

    Wire.beginTransmission(0x21);   // Select U4
    Wire.write(0x13);           // Select PORTB
    Wire.write(states[2]);      // Write states
    Wire.endTransmission();

    Wire.beginTransmission(0x21);   // Select U4
    Wire.write(0x12);           // Select PORTA
    Wire.write(states[3]);      // Write states
    Wire.endTransmission();
}

void IOExpander::post() {
    for (size_t i = 0; i != 28; set(i++, true));
    update();
}

void IOExpander::analogSelect(size_t pin) {
    states[3] &= 0xF0;              // Clear the low bits
    states[3] |= pin & 0x0F;        // Set the low bits to which pin we want
    Wire.beginTransmission(0x21);   // Select U4
    Wire.write(0x12);               // Select PORTA
    Wire.write(states[3]);          // Write states
    Wire.endTransmission();
}

uint8_t IOExpander::analogRead(size_t pin) {
    analogSelect(pin);
    return ::analogRead(0);           // The common reader pin
}

IOExpander::IOExpander(): 
    states({0u, 0u, 0u, 0u})
{
    // First, set all digital pins to output. This was Ctrl-V'd from tutorial
    Wire.beginTransmission(0x20);                  // Starts communication with MCP23017(U2) IC
    Wire.write(0x00);                              // Set MCP23017 memory pointer to IODIRA address
    Wire.write(0x00);                              // Set all pins of PORTA to outputs
    Wire.endTransmission();                        // Ends I2C communication with MCP23017(U2) IC

    Wire.beginTransmission(0x20);                  // Starts communication with MCP23017(U2) IC
    Wire.write(0x01);                              // Set MCP23017 memory pointer to IODIRB address
    Wire.write(0x00);                              // Set all pins of PORTB to outputs
    Wire.endTransmission();                        // Ends I2C communication with MCP23017(U2) IC
    /* 
    *  The following code starts I2C communication with MCP23017(U4).Please refer MCP23017 datasheet
    *  for register addresses. Sets all GPIOs of this IC to OUTPUT 
    */
    Wire.beginTransmission(0x21);                  // Starts communication with MCP23017(U4) IC
    Wire.write(0x00);                              // Set MCP23017 memory pointer to IODIRA address
    Wire.write(0x00);                              // Set all PORTA pins to OUTPUT
    Wire.endTransmission();                        // Ends I2C communication with MCP23017(U4) IC

    Wire.beginTransmission(0x21);                  // Starts communication with MCP23017(U4) IC
    Wire.write(0x01);                              // Set MCP23017 memory pointer to IODIRB address
    Wire.write(0x00);                              // Set all PORTB pins to OUTPUT
    Wire.endTransmission();                        // Ends I2C communication with MCP23017(U4) IC

    /* 
    *  The following code sets up I2C communication with MCP23017(U4), selects Bank 0 and set all PORTA pins as outputs.
    *  This is because the select pins of 74HC4067 are driven through MCP23017(U4). Please refer MCP23017 datasheet for 
    *  register addresses.
    *  (Duplicate initialization code removed)
    */
    // Problems if you include it - just set in main file
    // pinMode(0, INPUT);                           // Set Analog Common I/O(Arduino Analog A0) to INPUT
    post();
}